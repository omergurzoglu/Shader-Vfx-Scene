#pragma kernel CSMain
#define GROUP_SIZE 512

struct Boid
{
    float3 position;
    float3 direction;
};

RWStructuredBuffer<Boid> boidsBuffer;

float time;
float deltaTime;
float rotationSpeed;
float boidSpeed;
float boidSpeedVariation;
float3 flockPosition;
float neighbourDistance;
int boidsCount;

[numthreads(GROUP_SIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Boid boid = boidsBuffer[id.x];
	float3 seperation=0;
	float3 alignment=0;
	float3 cohesion=0;
	uint nearbyCount=1;
	for (int i = 0; i < boidsCount; i++)
	{
		if (i!=int(id.x))
		{
			Boid tempBoid = boidsBuffer[i];
			if (distance(boid.position,tempBoid.position)<neighbourDistance)
			{
				float3 offset = boid.position - tempBoid.position;
				float dist = length(offset);
				if (dist<neighbourDistance)
				{
					dist= max(dist,0.0001f);
					seperation += offset*(1.0f/dist -1.0f/neighbourDistance);
					
				}
				alignment += tempBoid.direction;
				cohesion += tempBoid.position;
				nearbyCount++;
			}
		}
		
	}
	float avg = 1.0f/(nearbyCount);
	alignment *= avg;
	cohesion *= avg;
	cohesion = normalize(cohesion-boid.position);
    float3 direction = alignment + seperation+ cohesion;
	boid.direction = lerp(direction,normalize(boid.direction),0.94);
	boid.position += boid.direction * deltaTime * boidSpeed;
	boidsBuffer[id.x] = boid;
	
}

